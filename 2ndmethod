require('dotenv').config();

const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const app = express();
const server = require('http').Server(app);
const io = require('socket.io').listen(server);
const passport = require('passport');
const strategy = require('passport-facebook');
const cookieParser = require('cookie-parser');
const userRoutes = require('./userRoutes');
var bodyParser = require('body-parser');

const session = require('express-session');
const MongoStore = require('connect-mongo')(session);
const passportSocketIo = require("passport.socketio");

const FacebookStrategy = strategy.Strategy;
const players = {};

const uri = process.env.MONGO_CONNECTION_URL;
mongoose.connect(uri, { useNewUrlParser: true, useCreateIndex: true, useUnifiedTopology: true });
mongoose.connection.on('error', (error) => {
  console.log(error);
  process.exit(1);
});
mongoose.connection.on('connected', function () {
  console.log('connected to mongo');
});
mongoose.set('useFindAndModify', false);

var sessionStore = new MongoStore({ mongooseConnection: mongoose.connection });
//var sessionStore = new MongoStore({ url: process.env.MONGO_CONNECTION_URL });
app.use(express.static(path.join(__dirname, 'public')));
var cookieParserObj = require('cookie-parser')('pbomb'); // <- your secret here
app.use(cookieParser());
app.use(session({
  store: sessionStore,
  secret: 'pbomb',
  resave: false,
  saveUninitialized: true
}));
app.use(passport.initialize());
app.use(passport.session());
app.use(bodyParser.json());

io.use(function (socket, next) {
  cookieParserObj(socket.handshake, {}, function (err) {    
    if (err) {
      console.log("error in parsing cookie");
      return next(err);
    }
    if (!socket.handshake.signedCookies) {
      console.log("no secureCookies|signedCookies found");
      return next(new Error("no secureCookies found"));
    }
    sessionStore.get(socket.handshake.signedCookies["connect.sid"], function (err, session) {
      socket.session = session;
      console.log(session);
      if (!err && !session) err = new Error('session not found');
      if (err) {
        console.log('failed connection to socket.io:', err);
      } else {
        console.log('successful connection to socket.io');
      }
      next(err);
    });
  });
});

function onAuthorizeSuccess(data, accept) {
  console.log('successful connection to socket.io');
  console.log(data);
  accept();
}

function onAuthorizeFail(data, message, error, accept) {
  console.log('error');
  console.log(message);
  console.log(error);
  accept(new Error(message));
}

io.on('connection', function (socket) {
  console.log('a user connected: ', socket.id);
  console.log(socket.session);
  players[socket.id] = {
    playerId: socket.id,
    kills: 0,
    deaths: 0,
    score: 0
  };
  socket.emit('currentPlayers', players);
  socket.broadcast.emit('newPlayer', players[socket.id]);

  socket.on('disconnect', function () {
    console.log('user disconnected: ', socket.id);
    delete players[socket.id];
    io.emit('disconnect', socket.id);
  });

  socket.on('playerMovement', function (movementData) {
    players[socket.id] = { ...players[socket.id], ...movementData };
    socket.broadcast.emit('playerMoved', players[socket.id]);
  });

  socket.on('playerShoot', (x, y) => {
    socket.broadcast.emit('playerShoot', { id: socket.id, x, y });
  });

  socket.on('playerDead', (killerId, dx, dy) => {
    console.log(`${killerId} killed ${socket.id}`)
    if (killerId == socket.id) {
      players[socket.id].deaths++;
    }
    else {
      players[killerId].kills++;
      players[socket.id].deaths++;
    }
    players[socket.id].score = players[socket.id].kills - players[socket.id].deaths;
    socket.broadcast.emit('playerDead', socket.id, dx, dy);
  });

  setInterval(() => {
    const values = Object.values(players);
    io.emit('score', values);
  }, 1000);
});

app.use("/", userRoutes);

passport.serializeUser(function (user, done) {
  done(null, user);
});

passport.deserializeUser(function (obj, done) {
  done(null, obj);
});

passport.use(
  new FacebookStrategy(
    {
      clientID: process.env.FACEBOOK_CLIENT_ID,
      clientSecret: process.env.FACEBOOK_CLIENT_SECRET,
      callbackURL: process.env.FACEBOOK_CALLBACK_URL,
      profileFields: ["email", "name"]
    },
    function (accessToken, refreshToken, profile, done) {
      const { email, first_name, last_name } = profile._json;
      const userData = {
        email,
        firstName: first_name,
        lastName: last_name
      };
      console.log(userData);
      //new userModel(userData).save();
      done(null, profile);
    }
  )
);

server.listen(process.env.PORT || 3000, () => {
  console.log(`Server started on port ${process.env.PORT || 3000}`);
});
